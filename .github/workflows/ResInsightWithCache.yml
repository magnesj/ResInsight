name: ResInsight Build With Cache

on:
  push:
  pull_request:
  schedule:
    # Every day at 1am to make sure we have a build cache for the current date
    # build cache is
    - cron: '0 1 * * *'
env:
  BUILD_TYPE: Release
  BUILDCACHE_VERSION: 0.27.6
  BUILDCACHE_DIR: ${{ github.workspace }}/buildcache_dir
  BUILDCACHE_ACCURACY: SLOPPY

concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
              name: "Windows Latest MSVC",
              os: windows-2022,
              cc: "cl",
              cxx: "cl",
              vcpkg-response-file: vcpkg_x64-windows.txt,
              vcpkg-triplet: x64-windows,
              build-python-module: true,
              execute-unit-tests: true,
              unity-build: true,
              publish-to-pypi: false,
            }
          - {
              name: "Ubuntu Latest gcc",
              os: ubuntu-20.04,
              cc: "gcc",
              cxx: "g++",
              vcpkg-response-file: vcpkg_x64-linux.txt,
              vcpkg-triplet: x64-linux,
              build-python-module: true,
              execute-unit-tests: true,
              unity-build: false,
              publish-to-pypi: true,
            }
          - {
              name: "Ubuntu Latest clang",
              os: ubuntu-20.04,
              cc: "clang",
              cxx: "clang++",
              vcpkg-response-file: vcpkg_x64-linux.txt,
              vcpkg-triplet: x64-linux,
              build-python-module: true,
              execute-unit-tests: true,
              unity-build: false,
              publish-to-pypi: false,
            }

    env:
      # Indicates the location of the vcpkg as a Git submodule of the project repository.
      # Not using "VCPKG_ROOT" because a variable with the same name is defined in the VS's
      # Developer Command Prompt environment in VS 2022 17.6, which would override this one 
      # if it had the same name.
      _VCPKG_: ${{ github.workspace }}/ThirdParty/vcpkg
      # Tells vcpkg where binary packages are stored.
      VCPKG_DEFAULT_BINARY_CACHE: ${{ github.workspace }}/ThirdParty/vcpkg/bincache
      # Let's use GitHub Action cache as storage for the vcpkg Binary Caching feature.
      VCPKG_BINARY_SOURCES: 'clear;x-gha,readwrite'            

    steps:
    # Set env vars needed for vcpkg to leverage the GitHub Action cache as a storage
    # for Binary Caching.
      - uses: actions/github-script@v6
        with:
          script: |
            core.exportVariable('ACTIONS_CACHE_URL', process.env.ACTIONS_CACHE_URL || '');
            core.exportVariable('ACTIONS_RUNTIME_TOKEN', process.env.ACTIONS_RUNTIME_TOKEN || '');

      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - name: Display Python version
        run: python -c "import sys; print(sys.version)"

      - name: Get Python executable path
        shell: bash
        id: python-path
        run: echo "PYTHON_EXECUTABLE=$(python -c 'import sys; import pathlib; print (pathlib.PurePath(sys.executable).as_posix())')" >> $GITHUB_OUTPUT

      - name: Print Python path
        run: echo "${{ steps.python-path.outputs.PYTHON_EXECUTABLE }}"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r GrpcInterface/Python/requirements.txt

      - name: Use CMake
        uses: lukka/get-cmake@latest

      - name: "Create directory '${{ env.VCPKG_DEFAULT_BINARY_CACHE }}'"
        run: mkdir -p $VCPKG_DEFAULT_BINARY_CACHE
        shell: bash        

      # Restore vcpkg from the GitHub Action cache service. Note that packages are restored by vcpkg's binary caching
      # when it is being run afterwards by CMake.
      - name: Restore vcpkg
        uses: actions/cache@v3
        with:
          # The first path is the location of vcpkg: it contains the vcpkg executable and data files, as long as the
          # built package archives (aka binary cache) which are located by VCPKG_DEFAULT_BINARY_CACHE env var.
          # The other paths starting with '!' are exclusions: they contain termporary files generated during the build of the installed packages.
          path: |
            ${{ env._VCPKG_ }}
            !${{ env._VCPKG_ }}/buildtrees
            !${{ env._VCPKG_ }}/packages
            !${{ env._VCPKG_ }}/downloads
            !${{ env._VCPKG_ }}/installed
          # The key is composed in a way that it gets properly invalidated whenever a different version of vcpkg is being used.
          key: |
            ${{ hashFiles( '.git/modules/vcpkg/HEAD' )}}        

      - name: Use MSVC (Windows)
        uses: ilammy/msvc-dev-cmd@v1

      - name: Download buildcache
        id: buildcache-download
        shell: cmake -P {0}
        run: |
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(buildcache_suffix "windows.zip")
          elseif ("${{ runner.os }}" STREQUAL "macOS")
            set(buildcache_suffix "macos.zip")
          elseif ("${{ runner.os }}" STREQUAL "Linux")
            set(buildcache_suffix "linux.tar.gz")
          endif()

          set(buildcache_version $ENV{BUILDCACHE_VERSION})
          set(buildcache_url "https://github.com/mbitsnbites/buildcache/releases/download/v${buildcache_version}/buildcache-${buildcache_suffix}")
          file(DOWNLOAD "${buildcache_url}" ./buildcache.zip)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ./buildcache.zip)

          if (NOT "${{ runner.os }}" STREQUAL "Windows")
            execute_process(
              COMMAND chmod +x buildcache/bin/buildcache
            )
          endif()

      - name: Get current time
        uses: josStorer/get-current-time@v2.0.2
        id: current-time
        with:
          format: YYYY-MM-DD

      - name: Print time stamp
        run: echo "timestamp ${{ steps.current-time.outputs.formattedTime }}"

      - name: Cache Buildcache
        id: cache-buildcache
        uses: actions/cache@v3
        with:
          path: ${{ env.BUILDCACHE_DIR }}
          key: ${{ matrix.config.os }}-${{ matrix.config.cc }}-cache-v02-${{ steps.current-time.outputs.formattedTime }}
      - name: Create Folder for buildcache
        run: New-Item ${{ env.BUILDCACHE_DIR }} -ItemType "directory" -Force
        shell: pwsh
      - name: Add buildcache to system path
        run: echo "${{github.workspace}}/buildcache/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8
        shell: pwsh

      - name: Set apt mirror
        # see https://github.com/actions/runner-images/issues/7048
        if: ${{contains( matrix.config.os, 'ubuntu') }}
        run: |
          # make sure there is a `\t` between URL and `priority:*` attributes
          printf 'http://azure.archive.ubuntu.com/ubuntu	priority:1\n' | sudo tee /etc/apt/mirrors.txt
          curl http://mirrors.ubuntu.com/mirrors.txt | sudo tee --append /etc/apt/mirrors.txt
          sudo sed -i 's/http:\/\/azure.archive.ubuntu.com\/ubuntu\//mirror+file:\/etc\/apt\/mirrors.txt/' /etc/apt/sources.list

      - name: Install Linux dependencies
        if: ${{contains( matrix.config.os, 'ubuntu') }}
        run: |
          sudo apt-get update --option="APT::Acquire::Retries=3"
          sudo apt-get install --option="APT::Acquire::Retries=3" libxkbcommon-x11-0 libgl1-mesa-dev mesa-common-dev libglfw3-dev libglu1-mesa-dev libhdf5-dev
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10 --slave /usr/bin/gcov gcov /usr/bin/gcov-10

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: 5.12.12
          dir: "${{ github.workspace }}/Qt/"
          cache: true

      - name: Stats for buildcache
        run: ${{ github.workspace }}/buildcache/bin/buildcache -s
      - name: Run Unit Tests
        if: matrix.config.execute-unit-tests && false
        shell: bash
        run: |
          cmakebuild/ApplicationExeCode/ResInsight --unittest

      # Run CMake to generate Ninja project files, using the vcpkg's toolchain file to resolve and install
      # the dependencies as specified in vcpkg.json. Note that the vcpkg's toolchain is specified
      # in the CMakePresets.json file.
      # This step also runs vcpkg with Binary Caching leveraging GitHub Action cache to
      # store the built packages artifacts.
      - name: Restore from cache the dependencies and generate project files
        run: |
          cmake --preset resinsight-base

      - name: Run pytest
        if: matrix.config.build-python-module && false
        env:
          RESINSIGHT_EXECUTABLE: ${{ runner.workspace }}/ResInsight/cmakebuild/ApplicationExeCode/ResInsight
        run: |
          cd GrpcInterface/Python
          python setup.py sdist          
          cd rips
          ${{ steps.python-path.outputs.PYTHON_EXECUTABLE }} -m pytest --console

      - name: Upload python distribution folder
        if: matrix.config.publish-to-pypi
        uses: actions/upload-artifact@v3
        with:
          name: python-distribution
          path: GrpcInterface/Python/dist

      - name: Upload Windows install artifact
        if: ${{contains( matrix.config.os, 'windows') }}
        uses: actions/upload-artifact@v3
        with:
          name: ResInsight-${{ matrix.config.name }}
          path: ${{ runner.workspace }}/ResInsight/cmakebuild/install

  pypi-publish:
    name: Upload release to PyPI
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/p/rips
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing  
    
    # If this is a tagged release
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')

    steps:
    - name: Download python distribution folder
      uses: actions/download-artifact@v3
      with:
        name: python-distribution
        path: dist

    - name: Display structure of downloaded files
      run: ls -R

    - name: Publish Python package to pypi
      # https://docs.pypi.org/trusted-publishers/adding-a-publisher/
      uses: pypa/gh-action-pypi-publish@release/v1
      # uncomment the two lines below to publish to test PyPi
      # with:
        # repository-url: https://test.pypi.org/legacy/

