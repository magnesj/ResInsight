name: Source Code Analysis

on: [push]

env:
  # Path to the CMake build directory.
  build: '${{ github.workspace }}/cmakebuild'
  config: 'RelWithDebInfo'

jobs:
  analyze:
    name: Analyze
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true

      - name: Use CMake
        uses: lukka/get-cmake@latest

      - name: Use MSVC (Windows)
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: 5.12.12
          modules: qtscript
          dir: "${{ github.workspace }}/Qt/"
          cache: true

      - name: Set vcpkg's response file path used as part of cache's key.
        uses: lukka/set-shell-env@master
        with:
          VCPKGRESPONSEFILE: ${{ github.workspace }}/vcpkg_x64-windows.txt
      - name: Restore from cache and install vcpkg
        uses: lukka/run-vcpkg@v7
        id: runvcpkg
        with:
          vcpkgArguments: "@${{ github.workspace }}/vcpkg_x64-windows.txt"
          vcpkgDirectory:
            "${{ github.workspace }}/ThirdParty/vcpkg"
            # Ensure the cache key changes any time the content of the response file changes.
          appendedCacheKey: ${{ hashFiles(env.VCPKGRESPONSEFILE) }}-cache-key-v2

      - name: Configure
        shell: cmake -P {0}
        run: |
          set(ENV{CC} ${{ matrix.config.cc }})
          set(ENV{CXX} ${{ matrix.config.cxx }})

          execute_process(
            COMMAND cmake
              -S .
              -B cmakebuild
              -D CMAKE_BUILD_TYPE=$ENV{BUILD_TYPE}
              -D CMAKE_INSTALL_PREFIX=cmakebuild/install
              -D RESINSIGHT_BUNDLE_OPENSSL=true
              -D RESINSIGHT_INCLUDE_APPLICATION_UNIT_TESTS=true
              -D RESINSIGHT_TREAT_WARNINGS_AS_ERRORS=true
              -D RESINSIGHT_ENABLE_GRPC=${{ matrix.config.build-python-module }}
              -D RESINSIGHT_GRPC_PYTHON_EXECUTABLE=${{ steps.python-path.outputs.PYTHON_EXECUTABLE }}
              -D RESINSIGHT_GRPC_DOWNLOAD_PYTHON_MODULE=true
              -D CMAKE_TOOLCHAIN_FILE=ThirdParty/vcpkg/scripts/buildsystems/vcpkg.cmake
              -G Ninja
            RESULT_VARIABLE result
          )
          if (NOT result EQUAL 0)
            message(FATAL_ERROR "Bad exit status")
          endif()
 
      - name: Run MSVC Code Analysis
        uses: microsoft/msvc-code-analysis-action@v0.1.1
        # Provide a unique ID to access the sarif output path
        id: run-analysis
        with:
          cmakeBuildDirectory: ${{ env.build }}
          buildConfiguration: ${{ env.config }}
          # Ruleset file that will determine what checks will be run
          ruleset: NativeRecommendedRules.ruleset
          # Paths to ignore analysis of CMake targets and includes
          # ignoredPaths: ${{ github.workspace }}/dependencies;${{ github.workspace }}/test

      # Upload SARIF file to GitHub Code Scanning Alerts
      - name: Upload SARIF to GitHub
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.run-analysis.outputs.sarif }}

      # Upload SARIF file as an Artifact to download and view
      - name: Upload SARIF as an Artifact
        uses: actions/upload-artifact@v2
        with:
          name: sarif-file
          path: ${{ steps.run-analysis.outputs.sarif }}